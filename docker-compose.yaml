version: '3.8'

services:
  taro-discord-bot:
    build: 
      context: ./taro-discord-bot/
      dockerfile: Dockerfile
    env_file:
      - .taro-discord-bot-env
    environment:
      - SERVICE_NAME=taro-discord-bot
      - TARO_RUNNER_ENDPOINT=http://taro-discord-runner:3000
    restart: always

  taro-discord-controller:
    build: 
      context: ./taro-discord-bot/
      dockerfile: Dockerfile
    env_file:
      - .taro-discord-bot-env
    environment:
      - SERVICE_NAME=taro-discord-controller
    ports:
      - 3000:3000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1
      interval: 20s
      timeout: 1m
      retries: 5
      start_period: 20s
    restart: always

  taro-discord-runner:
    build: 
      context: ./taro-discord-bot/
      dockerfile: Dockerfile
    env_file:
      - .taro-discord-bot-env
    environment:
      - SERVICE_NAME=taro-discord-runner
    ports:
      - 3030:3000
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1
      interval: 20s
      timeout: 1m
      retries: 5
      start_period: 20s
    restart: always

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/lib/docker/volumes/portainer_data/_data:/data
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: taro-db
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", 'pg_isready -U "taro-db"']
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  unleash-web:
    image: unleashorg/unleash-server:latest
    ports:
      - "4242:4242"
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres/taro-db
      DATABASE_SSL: "false"
      LOG_LEVEL: "debug"
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s

volumes:
  postgres-db-volume:
  